name: Deploy to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: devbongwook/marry1q-be
  GCP_PROJECT_ID: marry1q-be
  GCP_ZONE: asia-northeast3-c
  VM_INSTANCE_NAME: instance-20250910-070959

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Deploy to GCP VM
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        # VM에 접속하여 Docker 이미지 업데이트 및 재배포
        gcloud compute ssh ${{ env.VM_INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --command="
            # 기존 컨테이너 중지 및 제거
            sudo docker compose down || true
            sudo docker rm -f marry1q-be || true
            
            # 새로운 이미지 pull
            sudo docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          "
        
        # GitHub Secrets에서 환경변수를 사용하여 .env.production 파일 생성
        gcloud compute ssh ${{ env.VM_INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --command="cat > .env.production << EOF
        DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
        JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
        AUTH_BACKEND_URL=${{ secrets.AUTH_BACKEND_URL }}
        AUTH_BACKEND_CLIENT_ID=${{ secrets.AUTH_BACKEND_CLIENT_ID }}
        AUTH_BACKEND_CLIENT_SECRET=${{ secrets.AUTH_BACKEND_CLIENT_SECRET }}
        HANA_BANK_URL=${{ secrets.HANA_BANK_URL }}
        HANA_BANK_TIMEOUT_MS=${{ secrets.HANA_BANK_TIMEOUT_MS }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
        AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}
        AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}
        AWS_S3_REGION=${{ secrets.AWS_S3_REGION }}
        AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
        EOF"
        
        # docker-compose.yml 템플릿 파일 생성
        gcloud compute ssh ${{ env.VM_INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --command="cat > docker-compose.yml << 'EOF'
        version: '3.8'

        services:
          marry1q-be:
            image: \${DOCKER_REGISTRY}/\${DOCKER_IMAGE_NAME}:latest
            container_name: marry1q-be
            ports:
              - \"8080:8080\"
            environment:
              # Database Configuration
              - DB_HOST=\${DB_HOST}
              - DB_PORT=\${DB_PORT}
              - DB_NAME=\${DB_NAME}
              - DB_USERNAME=\${DB_USERNAME}
              - DB_PASSWORD=\${DB_PASSWORD}
              
              # JWT Configuration
              - JWT_SECRET=\${JWT_SECRET}
              - JWT_ACCESS_TOKEN_EXPIRATION=\${JWT_ACCESS_TOKEN_EXPIRATION}
              - JWT_REFRESH_TOKEN_EXPIRATION=\${JWT_REFRESH_TOKEN_EXPIRATION}
              
              # External API Configuration
              - AUTH_BACKEND_URL=\${AUTH_BACKEND_URL}
              - AUTH_BACKEND_CLIENT_ID=\${AUTH_BACKEND_CLIENT_ID}
              - AUTH_BACKEND_CLIENT_SECRET=\${AUTH_BACKEND_CLIENT_SECRET}
              
              - HANA_BANK_URL=\${HANA_BANK_URL}
              - HANA_BANK_TIMEOUT_MS=\${HANA_BANK_TIMEOUT_MS}
              
              - GEMINI_API_KEY=\${GEMINI_API_KEY}
              
              # CORS Configuration
              - CORS_ALLOWED_ORIGINS=\${CORS_ALLOWED_ORIGINS}
              
              # AWS S3 Configuration
              - AWS_S3_ACCESS_KEY=\${AWS_S3_ACCESS_KEY}
              - AWS_S3_SECRET_KEY=\${AWS_S3_SECRET_KEY}
              - AWS_S3_REGION=\${AWS_S3_REGION}
              - AWS_S3_BUCKET=\${AWS_S3_BUCKET}
            restart: unless-stopped
            healthcheck:
              test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/actuator/health\"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            networks:
              - marry1q-network

        networks:
          marry1q-network:
            driver: bridge
        EOF"
        
        # VM에서 컨테이너 재시작
        gcloud compute ssh ${{ env.VM_INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --command="
            # Docker Compose로 서비스 재시작
            sudo docker compose --env-file .env.production down || true
            sudo docker compose --env-file .env.production pull
            sudo docker compose --env-file .env.production up -d
            
            # 이전 이미지 정리
            sudo docker image prune -f
            
            # 배포 상태 확인
            sleep 10
            sudo docker compose ps
            sudo docker compose logs --tail=20 marry1q-be
          "

    - name: Health Check
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        # VM의 외부 IP 가져오기
        VM_IP=$(gcloud compute instances describe ${{ env.VM_INSTANCE_NAME }} \
          --zone=${{ env.GCP_ZONE }} \
          --project=${{ env.GCP_PROJECT_ID }} \
          --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        
        echo "VM External IP: $VM_IP"
        
        # 헬스체크 (최대 5분 대기)
        for i in {1..30}; do
          if curl -f http://$VM_IP:8080/actuator/health; then
            echo "✅ Application is healthy!"
            break
          else
            echo "⏳ Waiting for application to start... ($i/30)"
            sleep 10
          fi
        done

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment successful!"
          echo "Application URL: http://$(gcloud compute instances describe ${{ env.VM_INSTANCE_NAME }} --zone=${{ env.GCP_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)'):8080"
        else
          echo "❌ Deployment failed!"
        fi
